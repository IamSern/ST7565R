
gLCD_ST7565R.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013a8  08001f18  08001f18  00011f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032c0  080032c0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080032c0  080032c0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032c0  080032c0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032c0  080032c0  000132c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032c4  080032c4  000132c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080032c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  20000014  080032dc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  080032dc  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000804b  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e4  00000000  00000000  00028088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000698  00000000  00000000  00029770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e0  00000000  00000000  00029e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bfa  00000000  00000000  0002a3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008481  00000000  00000000  00040fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080cb3  00000000  00000000  00049463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ca116  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018f8  00000000  00000000  000ca16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f00 	.word	0x08001f00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08001f00 	.word	0x08001f00

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ST7565_Select>:


uint8_t ST7565_buffer[SCREEN_WIDTH * SCREEN_HEIGHT / 8];


void ST7565_Select(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	
    #ifdef CS_PORT
			//-- если захотим переделать под HAL ------------------	
			#ifdef ST7565_SPI_HAL
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000160:	2200      	movs	r2, #0
 8000162:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000166:	4802      	ldr	r0, [pc, #8]	; (8000170 <ST7565_Select+0x14>)
 8000168:	f001 f810 	bl	800118c <HAL_GPIO_WritePin>
				CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
			#endif
			//-----------------------------------------------------
	#endif
	
}
 800016c:	bf00      	nop
 800016e:	bd80      	pop	{r7, pc}
 8000170:	40010800 	.word	0x40010800

08000174 <ST7565_Unselect>:
void ST7565_Unselect(void) {
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	
    #ifdef CS_PORT
			//-- если захотим переделать под HAL ------------------	
			#ifdef ST7565_SPI_HAL
				HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000178:	2201      	movs	r2, #1
 800017a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800017e:	4802      	ldr	r0, [pc, #8]	; (8000188 <ST7565_Unselect+0x14>)
 8000180:	f001 f804 	bl	800118c <HAL_GPIO_WritePin>
					 CS_GPIO_Port->BSRR = CS_Pin;
			#endif
			//-----------------------------------------------------
	#endif
	
}
 8000184:	bf00      	nop
 8000186:	bd80      	pop	{r7, pc}
 8000188:	40010800 	.word	0x40010800

0800018c <ST7565_Reset>:

void ST7565_Reset( void ){  
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
	
 HAL_GPIO_WritePin( RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 8000190:	2200      	movs	r2, #0
 8000192:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000196:	4808      	ldr	r0, [pc, #32]	; (80001b8 <ST7565_Reset+0x2c>)
 8000198:	f000 fff8 	bl	800118c <HAL_GPIO_WritePin>
 HAL_Delay( 10 ); 
 800019c:	200a      	movs	r0, #10
 800019e:	f000 fd69 	bl	8000c74 <HAL_Delay>
	
 HAL_GPIO_WritePin( RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 80001a2:	2201      	movs	r2, #1
 80001a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001a8:	4803      	ldr	r0, [pc, #12]	; (80001b8 <ST7565_Reset+0x2c>)
 80001aa:	f000 ffef 	bl	800118c <HAL_GPIO_WritePin>
 HAL_Delay( 10 );  
 80001ae:	200a      	movs	r0, #10
 80001b0:	f000 fd60 	bl	8000c74 <HAL_Delay>
}
 80001b4:	bf00      	nop
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	40010800 	.word	0x40010800

080001bc <ST7565_w_dat>:

void ST7565_w_dat( uint8_t Dat ){  
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	4603      	mov	r3, r0
 80001c4:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под HAL ------------------	
	#ifdef ST7565_SPI_HAL
	
		 HAL_SPI_Transmit(&ST7565_SPI_HAL, &Dat, 1, HAL_MAX_DELAY);
 80001c6:	1df9      	adds	r1, r7, #7
 80001c8:	f04f 33ff 	mov.w	r3, #4294967295
 80001cc:	2201      	movs	r2, #1
 80001ce:	4807      	ldr	r0, [pc, #28]	; (80001ec <ST7565_w_dat+0x30>)
 80001d0:	f001 fc7a 	bl	8001ac8 <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY){};
 80001d4:	bf00      	nop
 80001d6:	4805      	ldr	r0, [pc, #20]	; (80001ec <ST7565_w_dat+0x30>)
 80001d8:	f001 fdb2 	bl	8001d40 <HAL_SPI_GetState>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b01      	cmp	r3, #1
 80001e0:	d1f9      	bne.n	80001d6 <ST7565_w_dat+0x1a>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------
	
}  
 80001e2:	bf00      	nop
 80001e4:	bf00      	nop
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	20000430 	.word	0x20000430

080001f0 <ST7565_w_cmd>:

void ST7565_w_cmd( uint8_t Command ){  
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под HAL ------------------	
	#ifdef ST7565_SPI_HAL
		
		// pin DC LOW
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80001fa:	2200      	movs	r2, #0
 80001fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000200:	480d      	ldr	r0, [pc, #52]	; (8000238 <ST7565_w_cmd+0x48>)
 8000202:	f000 ffc3 	bl	800118c <HAL_GPIO_WritePin>
		 
		 HAL_SPI_Transmit(&ST7565_SPI_HAL, &Command, 1, HAL_MAX_DELAY);
 8000206:	1df9      	adds	r1, r7, #7
 8000208:	f04f 33ff 	mov.w	r3, #4294967295
 800020c:	2201      	movs	r2, #1
 800020e:	480b      	ldr	r0, [pc, #44]	; (800023c <ST7565_w_cmd+0x4c>)
 8000210:	f001 fc5a 	bl	8001ac8 <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY){};
 8000214:	bf00      	nop
 8000216:	4809      	ldr	r0, [pc, #36]	; (800023c <ST7565_w_cmd+0x4c>)
 8000218:	f001 fd92 	bl	8001d40 <HAL_SPI_GetState>
 800021c:	4603      	mov	r3, r0
 800021e:	2b01      	cmp	r3, #1
 8000220:	d1f9      	bne.n	8000216 <ST7565_w_cmd+0x26>
		 
		 // pin DC HIGH
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8000222:	2201      	movs	r2, #1
 8000224:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000228:	4803      	ldr	r0, [pc, #12]	; (8000238 <ST7565_w_cmd+0x48>)
 800022a:	f000 ffaf 	bl	800118c <HAL_GPIO_WritePin>
		DC_GPIO_Port->BSRR = DC_Pin;
		
	#endif
	//-----------------------------------------------------------------------------------
	
} 
 800022e:	bf00      	nop
 8000230:	3708      	adds	r7, #8
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40010800 	.word	0x40010800
 800023c:	20000430 	.word	0x20000430

08000240 <ST7565_Display_fill>:

void ST7565_Display_fill( uint8_t fill ){  
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	71fb      	strb	r3, [r7, #7]
	
	uint8_t page,column;  
	
	memset( ST7565_buffer, (uint8_t)fill, ( SCREEN_WIDTH * SCREEN_HEIGHT / 8 ) );	// отчистка памяти заполняем массив значением 0x00
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000250:	4619      	mov	r1, r3
 8000252:	4815      	ldr	r0, [pc, #84]	; (80002a8 <ST7565_Display_fill+0x68>)
 8000254:	f001 fe4c 	bl	8001ef0 <memset>
	
	ST7565_Select();
 8000258:	f7ff ff80 	bl	800015c <ST7565_Select>
	
	for( page=0xB7; page>=0xB0; page-- ){
 800025c:	23b7      	movs	r3, #183	; 0xb7
 800025e:	73fb      	strb	r3, [r7, #15]
 8000260:	e019      	b.n	8000296 <ST7565_Display_fill+0x56>
		
		ST7565_w_cmd(page);  //set page address   
 8000262:	7bfb      	ldrb	r3, [r7, #15]
 8000264:	4618      	mov	r0, r3
 8000266:	f7ff ffc3 	bl	80001f0 <ST7565_w_cmd>
		ST7565_w_cmd(0x10);  //set Column address MSB   
 800026a:	2010      	movs	r0, #16
 800026c:	f7ff ffc0 	bl	80001f0 <ST7565_w_cmd>
		ST7565_w_cmd(0x00);  //set column address LSB   
 8000270:	2000      	movs	r0, #0
 8000272:	f7ff ffbd 	bl	80001f0 <ST7565_w_cmd>
		for( column=0; column<131; column++ ){  
 8000276:	2300      	movs	r3, #0
 8000278:	73bb      	strb	r3, [r7, #14]
 800027a:	e006      	b.n	800028a <ST7565_Display_fill+0x4a>
			ST7565_w_dat(fill);  
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	4618      	mov	r0, r3
 8000280:	f7ff ff9c 	bl	80001bc <ST7565_w_dat>
		for( column=0; column<131; column++ ){  
 8000284:	7bbb      	ldrb	r3, [r7, #14]
 8000286:	3301      	adds	r3, #1
 8000288:	73bb      	strb	r3, [r7, #14]
 800028a:	7bbb      	ldrb	r3, [r7, #14]
 800028c:	2b82      	cmp	r3, #130	; 0x82
 800028e:	d9f5      	bls.n	800027c <ST7565_Display_fill+0x3c>
	for( page=0xB7; page>=0xB0; page-- ){
 8000290:	7bfb      	ldrb	r3, [r7, #15]
 8000292:	3b01      	subs	r3, #1
 8000294:	73fb      	strb	r3, [r7, #15]
 8000296:	7bfb      	ldrb	r3, [r7, #15]
 8000298:	2baf      	cmp	r3, #175	; 0xaf
 800029a:	d8e2      	bhi.n	8000262 <ST7565_Display_fill+0x22>
        }  
    }
		
	ST7565_Unselect();
 800029c:	f7ff ff6a 	bl	8000174 <ST7565_Unselect>
}
 80002a0:	bf00      	nop
 80002a2:	3710      	adds	r7, #16
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000030 	.word	0x20000030

080002ac <ST7565_Init>:

void ST7565_Init( void ){  
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	
	ST7565_Select();
 80002b0:	f7ff ff54 	bl	800015c <ST7565_Select>
	
	ST7565_Reset();
 80002b4:	f7ff ff6a 	bl	800018c <ST7565_Reset>

	// Установите рабочий цикл ( 1/7 или 1/9 ) в зависимости от физического ЖК-дисплея	
	ST7565_w_cmd( CMD_SET_BIAS_9 );    // CMD_SET_BIAS_7   1/7    CMD_SET_BIAS_9  1/9
 80002b8:	20a2      	movs	r0, #162	; 0xa2
 80002ba:	f7ff ff99 	bl	80001f0 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80002be:	2001      	movs	r0, #1
 80002c0:	f000 fcd8 	bl	8000c74 <HAL_Delay>
	// Установите горизонтальную и вертикальную ориентацию в известное состояние
	#if defined (SCREEN_ORIENTATION_180)
		ST7565_w_cmd( CMD_SET_ADC_REVERSE );    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		ST7565_w_cmd( CMD_SET_COM_NORMAL );    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#else
		ST7565_w_cmd( CMD_SET_ADC_NORMAL );    		//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
 80002c4:	20a0      	movs	r0, #160	; 0xa0
 80002c6:	f7ff ff93 	bl	80001f0 <ST7565_w_cmd>
		ST7565_w_cmd( CMD_SET_COM_REVERSE );    	//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
 80002ca:	20c8      	movs	r0, #200	; 0xc8
 80002cc:	f7ff ff90 	bl	80001f0 <ST7565_w_cmd>
	#endif		
	//---------------------------------------------------------------------------------------------	
	
	HAL_Delay(1);
 80002d0:	2001      	movs	r0, #1
 80002d2:	f000 fccf 	bl	8000c74 <HAL_Delay>
	
	// делитель внутреннего резистора установлен на 7 (от 0..7)	
	ST7565_w_cmd( CMD_SET_RESISTOR_RATIO | 0x7 );    //Regulator Resistor Selection   
 80002d6:	2027      	movs	r0, #39	; 0x27
 80002d8:	f7ff ff8a 	bl	80001f0 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80002dc:	2001      	movs	r0, #1
 80002de:	f000 fcc9 	bl	8000c74 <HAL_Delay>
	
	// управление питанием, все внутренние блоки включены	(от 0..7)
	ST7565_w_cmd( CMD_SET_POWER_CONTROL | 0x7 );
 80002e2:	202f      	movs	r0, #47	; 0x2f
 80002e4:	f7ff ff84 	bl	80001f0 <ST7565_w_cmd>
		
	HAL_Delay(1);
 80002e8:	2001      	movs	r0, #1
 80002ea:	f000 fcc3 	bl	8000c74 <HAL_Delay>

	// войти в режим динамического контраста	
	ST7565_w_cmd( CMD_SET_VOLUME_FIRST );    //Electronic Volume   
 80002ee:	2081      	movs	r0, #129	; 0x81
 80002f0:	f7ff ff7e 	bl	80001f0 <ST7565_w_cmd>
	ST7565_w_cmd( 19 );	// устанавливает контраст от 0..63.
 80002f4:	2013      	movs	r0, #19
 80002f6:	f7ff ff7b 	bl	80001f0 <ST7565_w_cmd>
	
	HAL_Delay(1);
 80002fa:	2001      	movs	r0, #1
 80002fc:	f000 fcba 	bl	8000c74 <HAL_Delay>
	
	ST7565_w_cmd( CMD_SET_DISP_START_LINE );
 8000300:	2040      	movs	r0, #64	; 0x40
 8000302:	f7ff ff75 	bl	80001f0 <ST7565_w_cmd>
 
	HAL_Delay(1);
 8000306:	2001      	movs	r0, #1
 8000308:	f000 fcb4 	bl	8000c74 <HAL_Delay>

	// CMD_DISPLAY_ON  CMD_DISPLAY_OFF
	ST7565_w_cmd( CMD_DISPLAY_ON );    		//Display on   
 800030c:	20af      	movs	r0, #175	; 0xaf
 800030e:	f7ff ff6f 	bl	80001f0 <ST7565_w_cmd>
 
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd( CMD_SET_DISP_NORMAL );
 8000312:	20a6      	movs	r0, #166	; 0xa6
 8000314:	f7ff ff6c 	bl	80001f0 <ST7565_w_cmd>
	
	HAL_Delay(1);
 8000318:	2001      	movs	r0, #1
 800031a:	f000 fcab 	bl	8000c74 <HAL_Delay>
	
	ST7565_Display_fill( 0x00 );
 800031e:	2000      	movs	r0, #0
 8000320:	f7ff ff8e 	bl	8000240 <ST7565_Display_fill>
	
	ST7565_Unselect();
 8000324:	f7ff ff26 	bl	8000174 <ST7565_Unselect>
   
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}

0800032c <ST7565_Clear>:

void ST7565_Clear(void){
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
	
  uint8_t i, j;
	
  memset( ST7565_buffer, 0, ( SCREEN_WIDTH * SCREEN_HEIGHT / 8 ) );	// отчистка памяти заполняем массив значением 0x00
 8000332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000336:	2100      	movs	r1, #0
 8000338:	4816      	ldr	r0, [pc, #88]	; (8000394 <ST7565_Clear+0x68>)
 800033a:	f001 fdd9 	bl	8001ef0 <memset>
	
  ST7565_Select();
 800033e:	f7ff ff0d 	bl	800015c <ST7565_Select>
	
  for(i = 0; i < 8; i++) {
 8000342:	2300      	movs	r3, #0
 8000344:	71fb      	strb	r3, [r7, #7]
 8000346:	e01b      	b.n	8000380 <ST7565_Clear+0x54>

     ST7565_w_cmd(0xB0 | i); 			//sets page(row) from 0 to 7
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800034e:	b2db      	uxtb	r3, r3
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff4d 	bl	80001f0 <ST7565_w_cmd>
	 ST7565_w_cmd(0x10);				//sets column address(MSB) to 0 for each page(row)
 8000356:	2010      	movs	r0, #16
 8000358:	f7ff ff4a 	bl	80001f0 <ST7565_w_cmd>
     ST7565_w_cmd(0x00);				//sets Column address(LSB)to 0 for each page(row)
 800035c:	2000      	movs	r0, #0
 800035e:	f7ff ff47 	bl	80001f0 <ST7565_w_cmd>

    for(j = 0; j < 132; j++) {
 8000362:	2300      	movs	r3, #0
 8000364:	71bb      	strb	r3, [r7, #6]
 8000366:	e005      	b.n	8000374 <ST7565_Clear+0x48>
		ST7565_w_dat( 0x00 );
 8000368:	2000      	movs	r0, #0
 800036a:	f7ff ff27 	bl	80001bc <ST7565_w_dat>
    for(j = 0; j < 132; j++) {
 800036e:	79bb      	ldrb	r3, [r7, #6]
 8000370:	3301      	adds	r3, #1
 8000372:	71bb      	strb	r3, [r7, #6]
 8000374:	79bb      	ldrb	r3, [r7, #6]
 8000376:	2b83      	cmp	r3, #131	; 0x83
 8000378:	d9f6      	bls.n	8000368 <ST7565_Clear+0x3c>
  for(i = 0; i < 8; i++) {
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	3301      	adds	r3, #1
 800037e:	71fb      	strb	r3, [r7, #7]
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	2b07      	cmp	r3, #7
 8000384:	d9e0      	bls.n	8000348 <ST7565_Clear+0x1c>

  }
  
  
  
  ST7565_Unselect();
 8000386:	f7ff fef5 	bl	8000174 <ST7565_Unselect>
}
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000030 	.word	0x20000030

08000398 <ST7565_Draw_pixel>:

void ST7565_Draw_pixel(int16_t x, int16_t y, uint8_t color){
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	80fb      	strh	r3, [r7, #6]
 80003a2:	460b      	mov	r3, r1
 80003a4:	80bb      	strh	r3, [r7, #4]
 80003a6:	4613      	mov	r3, r2
 80003a8:	70fb      	strb	r3, [r7, #3]
	
    if (x > SCREEN_WIDTH || x < 0 || y > SCREEN_HEIGHT || y < 0) return;
 80003aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003ae:	2b80      	cmp	r3, #128	; 0x80
 80003b0:	f300 808b 	bgt.w	80004ca <ST7565_Draw_pixel+0x132>
 80003b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	f2c0 8086 	blt.w	80004ca <ST7565_Draw_pixel+0x132>
 80003be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80003c2:	2b40      	cmp	r3, #64	; 0x40
 80003c4:	f300 8081 	bgt.w	80004ca <ST7565_Draw_pixel+0x132>
 80003c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	db7c      	blt.n	80004ca <ST7565_Draw_pixel+0x132>

    // Real screen coordinates are 0-63, not 1-64.
    x -= 1;
 80003d0:	88fb      	ldrh	r3, [r7, #6]
 80003d2:	3b01      	subs	r3, #1
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	80fb      	strh	r3, [r7, #6]
    y -= 1;
 80003d8:	88bb      	ldrh	r3, [r7, #4]
 80003da:	3b01      	subs	r3, #1
 80003dc:	b29b      	uxth	r3, r3
 80003de:	80bb      	strh	r3, [r7, #4]

    uint16_t array_pos = x + ((y / 8) * SCREEN_WIDTH );
 80003e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	da00      	bge.n	80003ea <ST7565_Draw_pixel+0x52>
 80003e8:	3307      	adds	r3, #7
 80003ea:	10db      	asrs	r3, r3, #3
 80003ec:	b21b      	sxth	r3, r3
 80003ee:	b29b      	uxth	r3, r3
 80003f0:	01db      	lsls	r3, r3, #7
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	88fb      	ldrh	r3, [r7, #6]
 80003f6:	4413      	add	r3, r2
 80003f8:	81fb      	strh	r3, [r7, #14]


    if ( color ) {
 80003fa:	78fb      	ldrb	r3, [r7, #3]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d018      	beq.n	8000432 <ST7565_Draw_pixel+0x9a>
        ST7565_buffer[array_pos] |= 1 << (y % 8);
 8000400:	89fb      	ldrh	r3, [r7, #14]
 8000402:	4a34      	ldr	r2, [pc, #208]	; (80004d4 <ST7565_Draw_pixel+0x13c>)
 8000404:	5cd3      	ldrb	r3, [r2, r3]
 8000406:	b25a      	sxtb	r2, r3
 8000408:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800040c:	4259      	negs	r1, r3
 800040e:	f003 0307 	and.w	r3, r3, #7
 8000412:	f001 0107 	and.w	r1, r1, #7
 8000416:	bf58      	it	pl
 8000418:	424b      	negpl	r3, r1
 800041a:	b21b      	sxth	r3, r3
 800041c:	4619      	mov	r1, r3
 800041e:	2301      	movs	r3, #1
 8000420:	408b      	lsls	r3, r1
 8000422:	b25b      	sxtb	r3, r3
 8000424:	4313      	orrs	r3, r2
 8000426:	b25a      	sxtb	r2, r3
 8000428:	89fb      	ldrh	r3, [r7, #14]
 800042a:	b2d1      	uxtb	r1, r2
 800042c:	4a29      	ldr	r2, [pc, #164]	; (80004d4 <ST7565_Draw_pixel+0x13c>)
 800042e:	54d1      	strb	r1, [r2, r3]
 8000430:	e019      	b.n	8000466 <ST7565_Draw_pixel+0xce>
    } 
	else {
        ST7565_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 8000432:	89fb      	ldrh	r3, [r7, #14]
 8000434:	4a27      	ldr	r2, [pc, #156]	; (80004d4 <ST7565_Draw_pixel+0x13c>)
 8000436:	5cd3      	ldrb	r3, [r2, r3]
 8000438:	b25a      	sxtb	r2, r3
 800043a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800043e:	4259      	negs	r1, r3
 8000440:	f003 0307 	and.w	r3, r3, #7
 8000444:	f001 0107 	and.w	r1, r1, #7
 8000448:	bf58      	it	pl
 800044a:	424b      	negpl	r3, r1
 800044c:	b21b      	sxth	r3, r3
 800044e:	4619      	mov	r1, r3
 8000450:	2301      	movs	r3, #1
 8000452:	408b      	lsls	r3, r1
 8000454:	b25b      	sxtb	r3, r3
 8000456:	43db      	mvns	r3, r3
 8000458:	b25b      	sxtb	r3, r3
 800045a:	4013      	ands	r3, r2
 800045c:	b25a      	sxtb	r2, r3
 800045e:	89fb      	ldrh	r3, [r7, #14]
 8000460:	b2d1      	uxtb	r1, r2
 8000462:	4a1c      	ldr	r2, [pc, #112]	; (80004d4 <ST7565_Draw_pixel+0x13c>)
 8000464:	54d1      	strb	r1, [r2, r3]
    }
	
	ST7565_Select();
 8000466:	f7ff fe79 	bl	800015c <ST7565_Select>
	
	ST7565_SetX(x);	
 800046a:	88fb      	ldrh	r3, [r7, #6]
 800046c:	111b      	asrs	r3, r3, #4
 800046e:	b25b      	sxtb	r3, r3
 8000470:	f003 030f 	and.w	r3, r3, #15
 8000474:	b25b      	sxtb	r3, r3
 8000476:	f043 0310 	orr.w	r3, r3, #16
 800047a:	b25b      	sxtb	r3, r3
 800047c:	b2db      	uxtb	r3, r3
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff feb6 	bl	80001f0 <ST7565_w_cmd>
 8000484:	88fb      	ldrh	r3, [r7, #6]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 030f 	and.w	r3, r3, #15
 800048c:	b2db      	uxtb	r3, r3
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff feae 	bl	80001f0 <ST7565_w_cmd>
	
	// page 0xB0 0xB1 0xB2 0xB3 0xB4 0xB5 0xB6 0xB7
	ST7565_SetY( (int16_t)y/8 );	// ST7565_SetY(y) 		ST7565_w_cmd( ( (y) & 0x07 ) | 0xB0 )
 8000494:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <ST7565_Draw_pixel+0x106>
 800049c:	3307      	adds	r3, #7
 800049e:	10db      	asrs	r3, r3, #3
 80004a0:	b21b      	sxth	r3, r3
 80004a2:	b25b      	sxtb	r3, r3
 80004a4:	f003 0307 	and.w	r3, r3, #7
 80004a8:	b25b      	sxtb	r3, r3
 80004aa:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80004ae:	b25b      	sxtb	r3, r3
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff fe9c 	bl	80001f0 <ST7565_w_cmd>
		
	ST7565_w_dat( ST7565_buffer[array_pos] ); 
 80004b8:	89fb      	ldrh	r3, [r7, #14]
 80004ba:	4a06      	ldr	r2, [pc, #24]	; (80004d4 <ST7565_Draw_pixel+0x13c>)
 80004bc:	5cd3      	ldrb	r3, [r2, r3]
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff fe7c 	bl	80001bc <ST7565_w_dat>
	
	ST7565_Unselect();
 80004c4:	f7ff fe56 	bl	8000174 <ST7565_Unselect>
 80004c8:	e000      	b.n	80004cc <ST7565_Draw_pixel+0x134>
    if (x > SCREEN_WIDTH || x < 0 || y > SCREEN_HEIGHT || y < 0) return;
 80004ca:	bf00      	nop
}
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000030 	.word	0x20000030

080004d8 <ST7565_DrawChar>:
            if(byte & 0x80){ ST7565_Draw_pixel(x+i, y, color); }
        }
    }	
}

void ST7565_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	4603      	mov	r3, r0
 80004e2:	81fb      	strh	r3, [r7, #14]
 80004e4:	460b      	mov	r3, r1
 80004e6:	81bb      	strh	r3, [r7, #12]
 80004e8:	4613      	mov	r3, r2
 80004ea:	72fb      	strb	r3, [r7, #11]
	
	uint16_t i, j;
	
	uint16_t b;
	
	int16_t X = x, Y = y;
 80004ec:	89fb      	ldrh	r3, [r7, #14]
 80004ee:	833b      	strh	r3, [r7, #24]
 80004f0:	89bb      	ldrh	r3, [r7, #12]
 80004f2:	82fb      	strh	r3, [r7, #22]
	
	int16_t xx, yy;
	
	if( multiplier < 1 ){
 80004f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d102      	bne.n	8000502 <ST7565_DrawChar+0x2a>
		multiplier = 1;
 80004fc:	2301      	movs	r3, #1
 80004fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	}
	
	/* Check available space in LCD */
	if ( SCREEN_WIDTH >= ( x + Font->FontWidth) || SCREEN_HEIGHT >= ( y + Font->FontHeight)){
 8000502:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	7812      	ldrb	r2, [r2, #0]
 800050a:	4413      	add	r3, r2
 800050c:	2b80      	cmp	r3, #128	; 0x80
 800050e:	dd07      	ble.n	8000520 <ST7565_DrawChar+0x48>
 8000510:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	7852      	ldrb	r2, [r2, #1]
 8000518:	4413      	add	r3, r2
 800051a:	2b40      	cmp	r3, #64	; 0x40
 800051c:	f300 80dc 	bgt.w	80006d8 <ST7565_DrawChar+0x200>
	
		/* Go through font */
		for (i = 0; i < Font->FontHeight; i++) {
 8000520:	2300      	movs	r3, #0
 8000522:	83fb      	strh	r3, [r7, #30]
 8000524:	e0d1      	b.n	80006ca <ST7565_DrawChar+0x1f2>
			
			if( ch < 127 ){			
 8000526:	7afb      	ldrb	r3, [r7, #11]
 8000528:	2b7e      	cmp	r3, #126	; 0x7e
 800052a:	d80e      	bhi.n	800054a <ST7565_DrawChar+0x72>
				b = Font->data[(ch - 32) * Font->FontHeight + i];
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	685a      	ldr	r2, [r3, #4]
 8000530:	7afb      	ldrb	r3, [r7, #11]
 8000532:	3b20      	subs	r3, #32
 8000534:	6879      	ldr	r1, [r7, #4]
 8000536:	7849      	ldrb	r1, [r1, #1]
 8000538:	fb01 f103 	mul.w	r1, r1, r3
 800053c:	8bfb      	ldrh	r3, [r7, #30]
 800053e:	440b      	add	r3, r1
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	4413      	add	r3, r2
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	837b      	strh	r3, [r7, #26]
 8000548:	e038      	b.n	80005bc <ST7565_DrawChar+0xe4>
			}
			
			else if( (uint8_t) ch > 191 ){
 800054a:	7afb      	ldrb	r3, [r7, #11]
 800054c:	2bbf      	cmp	r3, #191	; 0xbf
 800054e:	d90e      	bls.n	800056e <ST7565_DrawChar+0x96>
				// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
				// и если в шрифте который содержит сперва латиницу и спец символы и потом 
				// только кирилицу то нужно добавлять 95 если шрифт 
				// содержит только кирилицу то +96 не нужно
				b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	685a      	ldr	r2, [r3, #4]
 8000554:	7afb      	ldrb	r3, [r7, #11]
 8000556:	3b60      	subs	r3, #96	; 0x60
 8000558:	6879      	ldr	r1, [r7, #4]
 800055a:	7849      	ldrb	r1, [r1, #1]
 800055c:	fb01 f103 	mul.w	r1, r1, r3
 8000560:	8bfb      	ldrh	r3, [r7, #30]
 8000562:	440b      	add	r3, r1
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	4413      	add	r3, r2
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	837b      	strh	r3, [r7, #26]
 800056c:	e026      	b.n	80005bc <ST7565_DrawChar+0xe4>
			}
			
			else if( (uint8_t) ch == 168 ){	// 168 символ по ASCII - Ё
 800056e:	7afb      	ldrb	r3, [r7, #11]
 8000570:	2ba8      	cmp	r3, #168	; 0xa8
 8000572:	d110      	bne.n	8000596 <ST7565_DrawChar+0xbe>
				// 160 эллемент ( символ Ё ) 
				b = Font->data[( 160 ) * Font->FontHeight + i];
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	685a      	ldr	r2, [r3, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	785b      	ldrb	r3, [r3, #1]
 800057c:	4619      	mov	r1, r3
 800057e:	460b      	mov	r3, r1
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	440b      	add	r3, r1
 8000584:	015b      	lsls	r3, r3, #5
 8000586:	4619      	mov	r1, r3
 8000588:	8bfb      	ldrh	r3, [r7, #30]
 800058a:	440b      	add	r3, r1
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	4413      	add	r3, r2
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	837b      	strh	r3, [r7, #26]
 8000594:	e012      	b.n	80005bc <ST7565_DrawChar+0xe4>
			}
			
			else if( (uint8_t) ch == 184 ){	// 184 символ по ASCII - ё
 8000596:	7afb      	ldrb	r3, [r7, #11]
 8000598:	2bb8      	cmp	r3, #184	; 0xb8
 800059a:	d10f      	bne.n	80005bc <ST7565_DrawChar+0xe4>
				// 161 эллемент  ( символ ё ) 
				b = Font->data[( 161 ) * Font->FontHeight + i];
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6859      	ldr	r1, [r3, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	785b      	ldrb	r3, [r3, #1]
 80005a4:	461a      	mov	r2, r3
 80005a6:	4613      	mov	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4413      	add	r3, r2
 80005ac:	015b      	lsls	r3, r3, #5
 80005ae:	441a      	add	r2, r3
 80005b0:	8bfb      	ldrh	r3, [r7, #30]
 80005b2:	4413      	add	r3, r2
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	440b      	add	r3, r1
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	837b      	strh	r3, [r7, #26]
			}
			//-------------------------------------------------------------------------------
			
			
			for (j = 0; j < Font->FontWidth; j++) {
 80005bc:	2300      	movs	r3, #0
 80005be:	83bb      	strh	r3, [r7, #28]
 80005c0:	e071      	b.n	80006a6 <ST7565_DrawChar+0x1ce>
				
				if ((b << j) & 0x8000) {
 80005c2:	8b7a      	ldrh	r2, [r7, #26]
 80005c4:	8bbb      	ldrh	r3, [r7, #28]
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d02d      	beq.n	800062e <ST7565_DrawChar+0x156>
					
					for (yy = 0; yy < multiplier; yy++){
 80005d2:	2300      	movs	r3, #0
 80005d4:	827b      	strh	r3, [r7, #18]
 80005d6:	e023      	b.n	8000620 <ST7565_DrawChar+0x148>
						for (xx = 0; xx < multiplier; xx++){
 80005d8:	2300      	movs	r3, #0
 80005da:	82bb      	strh	r3, [r7, #20]
 80005dc:	e014      	b.n	8000608 <ST7565_DrawChar+0x130>
								ST7565_Draw_pixel(X+xx, Y+yy, color);
 80005de:	8b3a      	ldrh	r2, [r7, #24]
 80005e0:	8abb      	ldrh	r3, [r7, #20]
 80005e2:	4413      	add	r3, r2
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	b218      	sxth	r0, r3
 80005e8:	8afa      	ldrh	r2, [r7, #22]
 80005ea:	8a7b      	ldrh	r3, [r7, #18]
 80005ec:	4413      	add	r3, r2
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	b21b      	sxth	r3, r3
 80005f2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80005f6:	4619      	mov	r1, r3
 80005f8:	f7ff fece 	bl	8000398 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 80005fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000600:	b29b      	uxth	r3, r3
 8000602:	3301      	adds	r3, #1
 8000604:	b29b      	uxth	r3, r3
 8000606:	82bb      	strh	r3, [r7, #20]
 8000608:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800060c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000610:	429a      	cmp	r2, r3
 8000612:	dbe4      	blt.n	80005de <ST7565_DrawChar+0x106>
					for (yy = 0; yy < multiplier; yy++){
 8000614:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000618:	b29b      	uxth	r3, r3
 800061a:	3301      	adds	r3, #1
 800061c:	b29b      	uxth	r3, r3
 800061e:	827b      	strh	r3, [r7, #18]
 8000620:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000624:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000628:	429a      	cmp	r2, r3
 800062a:	dbd5      	blt.n	80005d8 <ST7565_DrawChar+0x100>
 800062c:	e031      	b.n	8000692 <ST7565_DrawChar+0x1ba>
				}
				// если фон очищать то оставляем если чтоб фон оставался старый то коментируем эту часть --------------------------------------------
				//-----------------------------------------------------------------------------------------------------------------------------------
				else{
					
					for (yy = 0; yy < multiplier; yy++){
 800062e:	2300      	movs	r3, #0
 8000630:	827b      	strh	r3, [r7, #18]
 8000632:	e028      	b.n	8000686 <ST7565_DrawChar+0x1ae>
						for (xx = 0; xx < multiplier; xx++){
 8000634:	2300      	movs	r3, #0
 8000636:	82bb      	strh	r3, [r7, #20]
 8000638:	e019      	b.n	800066e <ST7565_DrawChar+0x196>
								ST7565_Draw_pixel(X+xx, Y+yy, !color);
 800063a:	8b3a      	ldrh	r2, [r7, #24]
 800063c:	8abb      	ldrh	r3, [r7, #20]
 800063e:	4413      	add	r3, r2
 8000640:	b29b      	uxth	r3, r3
 8000642:	b218      	sxth	r0, r3
 8000644:	8afa      	ldrh	r2, [r7, #22]
 8000646:	8a7b      	ldrh	r3, [r7, #18]
 8000648:	4413      	add	r3, r2
 800064a:	b29b      	uxth	r3, r3
 800064c:	b219      	sxth	r1, r3
 800064e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000652:	2b00      	cmp	r3, #0
 8000654:	bf0c      	ite	eq
 8000656:	2301      	moveq	r3, #1
 8000658:	2300      	movne	r3, #0
 800065a:	b2db      	uxtb	r3, r3
 800065c:	461a      	mov	r2, r3
 800065e:	f7ff fe9b 	bl	8000398 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 8000662:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000666:	b29b      	uxth	r3, r3
 8000668:	3301      	adds	r3, #1
 800066a:	b29b      	uxth	r3, r3
 800066c:	82bb      	strh	r3, [r7, #20]
 800066e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000672:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000676:	429a      	cmp	r2, r3
 8000678:	dbdf      	blt.n	800063a <ST7565_DrawChar+0x162>
					for (yy = 0; yy < multiplier; yy++){
 800067a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800067e:	b29b      	uxth	r3, r3
 8000680:	3301      	adds	r3, #1
 8000682:	b29b      	uxth	r3, r3
 8000684:	827b      	strh	r3, [r7, #18]
 8000686:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800068a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800068e:	429a      	cmp	r2, r3
 8000690:	dbd0      	blt.n	8000634 <ST7565_DrawChar+0x15c>
					}
				}
				//-----------------------------------------------------------------------------------------------------------------------------------
				//-----------------------------------------------------------------------------------------------------------------------------------
				
				X = X + multiplier;
 8000692:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000696:	b29a      	uxth	r2, r3
 8000698:	8b3b      	ldrh	r3, [r7, #24]
 800069a:	4413      	add	r3, r2
 800069c:	b29b      	uxth	r3, r3
 800069e:	833b      	strh	r3, [r7, #24]
			for (j = 0; j < Font->FontWidth; j++) {
 80006a0:	8bbb      	ldrh	r3, [r7, #28]
 80006a2:	3301      	adds	r3, #1
 80006a4:	83bb      	strh	r3, [r7, #28]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	8bba      	ldrh	r2, [r7, #28]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d387      	bcc.n	80005c2 <ST7565_DrawChar+0xea>
			}
			
			X = x;
 80006b2:	89fb      	ldrh	r3, [r7, #14]
 80006b4:	833b      	strh	r3, [r7, #24]
			Y = Y + multiplier;
 80006b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	8afb      	ldrh	r3, [r7, #22]
 80006be:	4413      	add	r3, r2
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	82fb      	strh	r3, [r7, #22]
		for (i = 0; i < Font->FontHeight; i++) {
 80006c4:	8bfb      	ldrh	r3, [r7, #30]
 80006c6:	3301      	adds	r3, #1
 80006c8:	83fb      	strh	r3, [r7, #30]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	785b      	ldrb	r3, [r3, #1]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	8bfa      	ldrh	r2, [r7, #30]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	f4ff af27 	bcc.w	8000526 <ST7565_DrawChar+0x4e>
		}
		
	}
}
 80006d8:	bf00      	nop
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <ST7565_Print>:

void ST7565_Print(int16_t x, int16_t y, char* str, FontDef_t* Font, uint8_t multiplier, uint8_t color) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	60ba      	str	r2, [r7, #8]
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4603      	mov	r3, r0
 80006ec:	81fb      	strh	r3, [r7, #14]
 80006ee:	460b      	mov	r3, r1
 80006f0:	81bb      	strh	r3, [r7, #12]
	
	if( multiplier < 1 ){
 80006f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d102      	bne.n	8000700 <ST7565_Print+0x20>
		multiplier = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	f887 3020 	strb.w	r3, [r7, #32]
	}
	
	unsigned char buff_char;
	
	uint16_t len = strlen(str);
 8000700:	68b8      	ldr	r0, [r7, #8]
 8000702:	f7ff fd23 	bl	800014c <strlen>
 8000706:	4603      	mov	r3, r0
 8000708:	82bb      	strh	r3, [r7, #20]
	
	while (len--) {
 800070a:	e06d      	b.n	80007e8 <ST7565_Print+0x108>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ){	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2bbf      	cmp	r3, #191	; 0xbf
 8000712:	d94a      	bls.n	80007aa <ST7565_Print+0xca>
			
			// проверяем какой именно байт первый 0xD0 либо 0xD1
			switch ((uint8_t)*str) {
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2bd0      	cmp	r3, #208	; 0xd0
 800071a:	d002      	beq.n	8000722 <ST7565_Print+0x42>
 800071c:	2bd1      	cmp	r3, #209	; 0xd1
 800071e:	d017      	beq.n	8000750 <ST7565_Print+0x70>
 8000720:	e031      	b.n	8000786 <ST7565_Print+0xa6>
				case 0xD0: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	3301      	adds	r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b81      	cmp	r3, #129	; 0x81
 800072e:	d102      	bne.n	8000736 <ST7565_Print+0x56>
 8000730:	23a8      	movs	r3, #168	; 0xa8
 8000732:	75fb      	strb	r3, [r7, #23]
 8000734:	e027      	b.n	8000786 <ST7565_Print+0xa6>
					if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF){ buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b8f      	cmp	r3, #143	; 0x8f
 800073c:	d920      	bls.n	8000780 <ST7565_Print+0xa0>
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2bbf      	cmp	r3, #191	; 0xbf
 8000744:	d81c      	bhi.n	8000780 <ST7565_Print+0xa0>
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	3330      	adds	r3, #48	; 0x30
 800074c:	75fb      	strb	r3, [r7, #23]
					break;
 800074e:	e017      	b.n	8000780 <ST7565_Print+0xa0>
				}
				case 0xD1: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	3301      	adds	r3, #1
 8000754:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b91      	cmp	r3, #145	; 0x91
 800075c:	d102      	bne.n	8000764 <ST7565_Print+0x84>
 800075e:	23b8      	movs	r3, #184	; 0xb8
 8000760:	75fb      	strb	r3, [r7, #23]
 8000762:	e010      	b.n	8000786 <ST7565_Print+0xa6>
					if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F){ buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	b25b      	sxtb	r3, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	da0a      	bge.n	8000784 <ST7565_Print+0xa4>
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b8f      	cmp	r3, #143	; 0x8f
 8000774:	d806      	bhi.n	8000784 <ST7565_Print+0xa4>
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	3370      	adds	r3, #112	; 0x70
 800077c:	75fb      	strb	r3, [r7, #23]
					break;
 800077e:	e001      	b.n	8000784 <ST7565_Print+0xa4>
					break;
 8000780:	bf00      	nop
 8000782:	e000      	b.n	8000786 <ST7565_Print+0xa6>
					break;
 8000784:	bf00      	nop
				}
			}
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8000786:	8abb      	ldrh	r3, [r7, #20]
 8000788:	3b01      	subs	r3, #1
 800078a:	82bb      	strh	r3, [r7, #20]
			
			ST7565_DrawChar( x, y, buff_char, Font, multiplier, color);
 800078c:	7dfa      	ldrb	r2, [r7, #23]
 800078e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000792:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8000796:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f7ff fe98 	bl	80004d8 <ST7565_DrawChar>
 80007a8:	e00e      	b.n	80007c8 <ST7565_Print+0xe8>
		}
		//---------------------------------------------------------------------
		else{			
			ST7565_DrawChar( x, y, *str, Font, multiplier, color);
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	781a      	ldrb	r2, [r3, #0]
 80007ae:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80007b2:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80007b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f7ff fe88 	bl	80004d8 <ST7565_DrawChar>
		}
		
		x = x + (Font->FontWidth * multiplier);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	f897 2020 	ldrb.w	r2, [r7, #32]
 80007d2:	b292      	uxth	r2, r2
 80007d4:	fb02 f303 	mul.w	r3, r2, r3
 80007d8:	b29a      	uxth	r2, r3
 80007da:	89fb      	ldrh	r3, [r7, #14]
 80007dc:	4413      	add	r3, r2
 80007de:	b29b      	uxth	r3, r3
 80007e0:	81fb      	strh	r3, [r7, #14]
		/* Increase string pointer */
		str++;
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	3301      	adds	r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
	while (len--) {
 80007e8:	8abb      	ldrh	r3, [r7, #20]
 80007ea:	1e5a      	subs	r2, r3, #1
 80007ec:	82ba      	strh	r2, [r7, #20]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d18c      	bne.n	800070c <ST7565_Print+0x2c>
	}
}
 80007f2:	bf00      	nop
 80007f4:	bf00      	nop
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f000 f9d5 	bl	8000bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 f829 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080a:	f000 f899 	bl	8000940 <MX_GPIO_Init>
  MX_SPI1_Init();
 800080e:	f000 f861 	bl	80008d4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7565_Init();
 8000812:	f7ff fd4b 	bl	80002ac <ST7565_Init>
//  HAL_Delay(1000);
//  ST7565_Draw_pixel(5, 5, 1);
  HAL_Delay(1000);
 8000816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800081a:	f000 fa2b 	bl	8000c74 <HAL_Delay>
  ST7565_Clear();
 800081e:	f7ff fd85 	bl	800032c <ST7565_Clear>
  HAL_Delay(1000);
 8000822:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000826:	f000 fa25 	bl	8000c74 <HAL_Delay>
  ST7565_Print(1, 1, "Hallo", &Font_16x26, 1, 1);
 800082a:	2301      	movs	r3, #1
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	2301      	movs	r3, #1
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	4b07      	ldr	r3, [pc, #28]	; (8000850 <main+0x54>)
 8000834:	4a07      	ldr	r2, [pc, #28]	; (8000854 <main+0x58>)
 8000836:	2101      	movs	r1, #1
 8000838:	2001      	movs	r0, #1
 800083a:	f7ff ff51 	bl	80006e0 <ST7565_Print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800083e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <main+0x5c>)
 8000844:	f000 fcba 	bl	80011bc <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000848:	20c8      	movs	r0, #200	; 0xc8
 800084a:	f000 fa13 	bl	8000c74 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800084e:	e7f6      	b.n	800083e <main+0x42>
 8000850:	20000000 	.word	0x20000000
 8000854:	08001f18 	.word	0x08001f18
 8000858:	40011000 	.word	0x40011000

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b090      	sub	sp, #64	; 0x40
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0318 	add.w	r3, r7, #24
 8000866:	2228      	movs	r2, #40	; 0x28
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fb40 	bl	8001ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800087e:	2302      	movs	r3, #2
 8000880:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000882:	2301      	movs	r3, #1
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000886:	2310      	movs	r3, #16
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800088a:	2300      	movs	r3, #0
 800088c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	f107 0318 	add.w	r3, r7, #24
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fcac 	bl	80011f0 <HAL_RCC_OscConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800089e:	f000 f8b1 	bl	8000a04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	230f      	movs	r3, #15
 80008a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 ff18 	bl	80016f0 <HAL_RCC_ClockConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008c6:	f000 f89d 	bl	8000a04 <Error_Handler>
  }
}
 80008ca:	bf00      	nop
 80008cc:	3740      	adds	r7, #64	; 0x40
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_SPI1_Init+0x64>)
 80008da:	4a18      	ldr	r2, [pc, #96]	; (800093c <MX_SPI1_Init+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <MX_SPI1_Init+0x64>)
 80008e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_SPI1_Init+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_SPI1_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_SPI1_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_SPI1_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_SPI1_Init+0x64>)
 8000900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000904:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_SPI1_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <MX_SPI1_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_SPI1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <MX_SPI1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_SPI1_Init+0x64>)
 8000920:	220a      	movs	r2, #10
 8000922:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_SPI1_Init+0x64>)
 8000926:	f001 f84b 	bl	80019c0 <HAL_SPI_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000930:	f000 f868 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000430 	.word	0x20000430
 800093c:	40013000 	.word	0x40013000

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000954:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <MX_GPIO_Init+0xb8>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a27      	ldr	r2, [pc, #156]	; (80009f8 <MX_GPIO_Init+0xb8>)
 800095a:	f043 0310 	orr.w	r3, r3, #16
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <MX_GPIO_Init+0xb8>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0310 	and.w	r3, r3, #16
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <MX_GPIO_Init+0xb8>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <MX_GPIO_Init+0xb8>)
 8000972:	f043 0320 	orr.w	r3, r3, #32
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <MX_GPIO_Init+0xb8>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0320 	and.w	r3, r3, #32
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_GPIO_Init+0xb8>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a1b      	ldr	r2, [pc, #108]	; (80009f8 <MX_GPIO_Init+0xb8>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_GPIO_Init+0xb8>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a2:	4816      	ldr	r0, [pc, #88]	; (80009fc <MX_GPIO_Init+0xbc>)
 80009a4:	f000 fbf2 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80009ae:	4814      	ldr	r0, [pc, #80]	; (8000a00 <MX_GPIO_Init+0xc0>)
 80009b0:	f000 fbec 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2302      	movs	r3, #2
 80009c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	4619      	mov	r1, r3
 80009cc:	480b      	ldr	r0, [pc, #44]	; (80009fc <MX_GPIO_Init+0xbc>)
 80009ce:	f000 fa59 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80009d2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	4619      	mov	r1, r3
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_GPIO_Init+0xc0>)
 80009ec:	f000 fa4a 	bl	8000e84 <HAL_GPIO_Init>

}
 80009f0:	bf00      	nop
 80009f2:	3720      	adds	r7, #32
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40011000 	.word	0x40011000
 8000a00:	40010800 	.word	0x40010800

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <Error_Handler+0x8>
	...

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6193      	str	r3, [r2, #24]
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	61d3      	str	r3, [r2, #28]
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <HAL_MspInit+0x60>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <HAL_MspInit+0x60>)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40010000 	.word	0x40010000

08000a74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a1b      	ldr	r2, [pc, #108]	; (8000afc <HAL_SPI_MspInit+0x88>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d12f      	bne.n	8000af4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a94:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <HAL_SPI_MspInit+0x8c>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <HAL_SPI_MspInit+0x8c>)
 8000a9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <HAL_SPI_MspInit+0x8c>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <HAL_SPI_MspInit+0x8c>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a13      	ldr	r2, [pc, #76]	; (8000b00 <HAL_SPI_MspInit+0x8c>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <HAL_SPI_MspInit+0x8c>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ac4:	23a0      	movs	r3, #160	; 0xa0
 8000ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480b      	ldr	r0, [pc, #44]	; (8000b04 <HAL_SPI_MspInit+0x90>)
 8000ad8:	f000 f9d4 	bl	8000e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000adc:	2340      	movs	r3, #64	; 0x40
 8000ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	4619      	mov	r1, r3
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <HAL_SPI_MspInit+0x90>)
 8000af0:	f000 f9c8 	bl	8000e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000af4:	bf00      	nop
 8000af6:	3720      	adds	r7, #32
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40013000 	.word	0x40013000
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40010800 	.word	0x40010800

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler+0x4>

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr

08000b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr

08000b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr

08000b4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4e:	f000 f875 	bl	8000c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
	...

08000b64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b64:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b66:	e003      	b.n	8000b70 <LoopCopyDataInit>

08000b68 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b6a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b6c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b6e:	3104      	adds	r1, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b70:	480a      	ldr	r0, [pc, #40]	; (8000b9c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b74:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b76:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b78:	d3f6      	bcc.n	8000b68 <CopyDataInit>
  ldr r2, =_sbss
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b7c:	e002      	b.n	8000b84 <LoopFillZerobss>

08000b7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b80:	f842 3b04 	str.w	r3, [r2], #4

08000b84 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b86:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b88:	d3f9      	bcc.n	8000b7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b8a:	f7ff ffe4 	bl	8000b56 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f001 f98b 	bl	8001ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b92:	f7ff fe33 	bl	80007fc <main>
  bx lr
 8000b96:	4770      	bx	lr
  ldr r3, =_sidata
 8000b98:	080032c8 	.word	0x080032c8
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ba0:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8000ba4:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8000ba8:	2000048c 	.word	0x2000048c

08000bac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC1_2_IRQHandler>
	...

08000bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_Init+0x28>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <HAL_Init+0x28>)
 8000bba:	f043 0310 	orr.w	r3, r3, #16
 8000bbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	f000 f92b 	bl	8000e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f000 f808 	bl	8000bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bcc:	f7ff ff20 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40022000 	.word	0x40022000

08000bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_InitTick+0x54>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_InitTick+0x58>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4619      	mov	r1, r3
 8000bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f935 	bl	8000e6a <HAL_SYSTICK_Config>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00e      	b.n	8000c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b0f      	cmp	r3, #15
 8000c0e:	d80a      	bhi.n	8000c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c10:	2200      	movs	r2, #0
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f000 f90b 	bl	8000e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c1c:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <HAL_InitTick+0x5c>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c22:	2300      	movs	r3, #0
 8000c24:	e000      	b.n	8000c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000010 	.word	0x20000010
 8000c38:	2000000c 	.word	0x2000000c

08000c3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_IncTick+0x1c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <HAL_IncTick+0x20>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a03      	ldr	r2, [pc, #12]	; (8000c5c <HAL_IncTick+0x20>)
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	20000010 	.word	0x20000010
 8000c5c:	20000488 	.word	0x20000488

08000c60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b02      	ldr	r3, [pc, #8]	; (8000c70 <HAL_GetTick+0x10>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	20000488 	.word	0x20000488

08000c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c7c:	f7ff fff0 	bl	8000c60 <HAL_GetTick>
 8000c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c8c:	d005      	beq.n	8000c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <HAL_Delay+0x44>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4413      	add	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c9a:	bf00      	nop
 8000c9c:	f7ff ffe0 	bl	8000c60 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d8f7      	bhi.n	8000c9c <HAL_Delay+0x28>
  {
  }
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000010 	.word	0x20000010

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	; (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	; (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
         );
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	; 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de8:	d301      	bcc.n	8000dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00f      	b.n	8000e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <SysTick_Config+0x40>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df6:	210f      	movs	r1, #15
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f7ff ff90 	bl	8000d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <SysTick_Config+0x40>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e06:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SysTick_Config+0x40>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff49 	bl	8000cbc <__NVIC_SetPriorityGrouping>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b086      	sub	sp, #24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e44:	f7ff ff5e 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	68b9      	ldr	r1, [r7, #8]
 8000e4e:	6978      	ldr	r0, [r7, #20]
 8000e50:	f7ff ff90 	bl	8000d74 <NVIC_EncodePriority>
 8000e54:	4602      	mov	r2, r0
 8000e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff5f 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e62:	bf00      	nop
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ffb0 	bl	8000dd8 <SysTick_Config>
 8000e78:	4603      	mov	r3, r0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b08b      	sub	sp, #44	; 0x2c
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e96:	e169      	b.n	800116c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	69fa      	ldr	r2, [r7, #28]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	f040 8158 	bne.w	8001166 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	4a9a      	ldr	r2, [pc, #616]	; (8001124 <HAL_GPIO_Init+0x2a0>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d05e      	beq.n	8000f7e <HAL_GPIO_Init+0xfa>
 8000ec0:	4a98      	ldr	r2, [pc, #608]	; (8001124 <HAL_GPIO_Init+0x2a0>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d875      	bhi.n	8000fb2 <HAL_GPIO_Init+0x12e>
 8000ec6:	4a98      	ldr	r2, [pc, #608]	; (8001128 <HAL_GPIO_Init+0x2a4>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d058      	beq.n	8000f7e <HAL_GPIO_Init+0xfa>
 8000ecc:	4a96      	ldr	r2, [pc, #600]	; (8001128 <HAL_GPIO_Init+0x2a4>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d86f      	bhi.n	8000fb2 <HAL_GPIO_Init+0x12e>
 8000ed2:	4a96      	ldr	r2, [pc, #600]	; (800112c <HAL_GPIO_Init+0x2a8>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d052      	beq.n	8000f7e <HAL_GPIO_Init+0xfa>
 8000ed8:	4a94      	ldr	r2, [pc, #592]	; (800112c <HAL_GPIO_Init+0x2a8>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d869      	bhi.n	8000fb2 <HAL_GPIO_Init+0x12e>
 8000ede:	4a94      	ldr	r2, [pc, #592]	; (8001130 <HAL_GPIO_Init+0x2ac>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d04c      	beq.n	8000f7e <HAL_GPIO_Init+0xfa>
 8000ee4:	4a92      	ldr	r2, [pc, #584]	; (8001130 <HAL_GPIO_Init+0x2ac>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d863      	bhi.n	8000fb2 <HAL_GPIO_Init+0x12e>
 8000eea:	4a92      	ldr	r2, [pc, #584]	; (8001134 <HAL_GPIO_Init+0x2b0>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d046      	beq.n	8000f7e <HAL_GPIO_Init+0xfa>
 8000ef0:	4a90      	ldr	r2, [pc, #576]	; (8001134 <HAL_GPIO_Init+0x2b0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d85d      	bhi.n	8000fb2 <HAL_GPIO_Init+0x12e>
 8000ef6:	2b12      	cmp	r3, #18
 8000ef8:	d82a      	bhi.n	8000f50 <HAL_GPIO_Init+0xcc>
 8000efa:	2b12      	cmp	r3, #18
 8000efc:	d859      	bhi.n	8000fb2 <HAL_GPIO_Init+0x12e>
 8000efe:	a201      	add	r2, pc, #4	; (adr r2, 8000f04 <HAL_GPIO_Init+0x80>)
 8000f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f04:	08000f7f 	.word	0x08000f7f
 8000f08:	08000f59 	.word	0x08000f59
 8000f0c:	08000f6b 	.word	0x08000f6b
 8000f10:	08000fad 	.word	0x08000fad
 8000f14:	08000fb3 	.word	0x08000fb3
 8000f18:	08000fb3 	.word	0x08000fb3
 8000f1c:	08000fb3 	.word	0x08000fb3
 8000f20:	08000fb3 	.word	0x08000fb3
 8000f24:	08000fb3 	.word	0x08000fb3
 8000f28:	08000fb3 	.word	0x08000fb3
 8000f2c:	08000fb3 	.word	0x08000fb3
 8000f30:	08000fb3 	.word	0x08000fb3
 8000f34:	08000fb3 	.word	0x08000fb3
 8000f38:	08000fb3 	.word	0x08000fb3
 8000f3c:	08000fb3 	.word	0x08000fb3
 8000f40:	08000fb3 	.word	0x08000fb3
 8000f44:	08000fb3 	.word	0x08000fb3
 8000f48:	08000f61 	.word	0x08000f61
 8000f4c:	08000f75 	.word	0x08000f75
 8000f50:	4a79      	ldr	r2, [pc, #484]	; (8001138 <HAL_GPIO_Init+0x2b4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d013      	beq.n	8000f7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f56:	e02c      	b.n	8000fb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	623b      	str	r3, [r7, #32]
          break;
 8000f5e:	e029      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	3304      	adds	r3, #4
 8000f66:	623b      	str	r3, [r7, #32]
          break;
 8000f68:	e024      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	3308      	adds	r3, #8
 8000f70:	623b      	str	r3, [r7, #32]
          break;
 8000f72:	e01f      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	330c      	adds	r3, #12
 8000f7a:	623b      	str	r3, [r7, #32]
          break;
 8000f7c:	e01a      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d102      	bne.n	8000f8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f86:	2304      	movs	r3, #4
 8000f88:	623b      	str	r3, [r7, #32]
          break;
 8000f8a:	e013      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d105      	bne.n	8000fa0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f94:	2308      	movs	r3, #8
 8000f96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69fa      	ldr	r2, [r7, #28]
 8000f9c:	611a      	str	r2, [r3, #16]
          break;
 8000f9e:	e009      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fa0:	2308      	movs	r3, #8
 8000fa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69fa      	ldr	r2, [r7, #28]
 8000fa8:	615a      	str	r2, [r3, #20]
          break;
 8000faa:	e003      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
          break;
 8000fb0:	e000      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          break;
 8000fb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	2bff      	cmp	r3, #255	; 0xff
 8000fb8:	d801      	bhi.n	8000fbe <HAL_GPIO_Init+0x13a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	e001      	b.n	8000fc2 <HAL_GPIO_Init+0x13e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	2bff      	cmp	r3, #255	; 0xff
 8000fc8:	d802      	bhi.n	8000fd0 <HAL_GPIO_Init+0x14c>
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	e002      	b.n	8000fd6 <HAL_GPIO_Init+0x152>
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd2:	3b08      	subs	r3, #8
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	210f      	movs	r1, #15
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	6a39      	ldr	r1, [r7, #32]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 80b1 	beq.w	8001166 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001004:	4b4d      	ldr	r3, [pc, #308]	; (800113c <HAL_GPIO_Init+0x2b8>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a4c      	ldr	r2, [pc, #304]	; (800113c <HAL_GPIO_Init+0x2b8>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b4a      	ldr	r3, [pc, #296]	; (800113c <HAL_GPIO_Init+0x2b8>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800101c:	4a48      	ldr	r2, [pc, #288]	; (8001140 <HAL_GPIO_Init+0x2bc>)
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001028:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	220f      	movs	r2, #15
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	4013      	ands	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a40      	ldr	r2, [pc, #256]	; (8001144 <HAL_GPIO_Init+0x2c0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d013      	beq.n	8001070 <HAL_GPIO_Init+0x1ec>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a3f      	ldr	r2, [pc, #252]	; (8001148 <HAL_GPIO_Init+0x2c4>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d00d      	beq.n	800106c <HAL_GPIO_Init+0x1e8>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a3e      	ldr	r2, [pc, #248]	; (800114c <HAL_GPIO_Init+0x2c8>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d007      	beq.n	8001068 <HAL_GPIO_Init+0x1e4>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a3d      	ldr	r2, [pc, #244]	; (8001150 <HAL_GPIO_Init+0x2cc>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d101      	bne.n	8001064 <HAL_GPIO_Init+0x1e0>
 8001060:	2303      	movs	r3, #3
 8001062:	e006      	b.n	8001072 <HAL_GPIO_Init+0x1ee>
 8001064:	2304      	movs	r3, #4
 8001066:	e004      	b.n	8001072 <HAL_GPIO_Init+0x1ee>
 8001068:	2302      	movs	r3, #2
 800106a:	e002      	b.n	8001072 <HAL_GPIO_Init+0x1ee>
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <HAL_GPIO_Init+0x1ee>
 8001070:	2300      	movs	r3, #0
 8001072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001074:	f002 0203 	and.w	r2, r2, #3
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	4093      	lsls	r3, r2
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	4313      	orrs	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001082:	492f      	ldr	r1, [pc, #188]	; (8001140 <HAL_GPIO_Init+0x2bc>)
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d006      	beq.n	80010aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800109c:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <HAL_GPIO_Init+0x2d0>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	492c      	ldr	r1, [pc, #176]	; (8001154 <HAL_GPIO_Init+0x2d0>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	600b      	str	r3, [r1, #0]
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010aa:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <HAL_GPIO_Init+0x2d0>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	4928      	ldr	r1, [pc, #160]	; (8001154 <HAL_GPIO_Init+0x2d0>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d006      	beq.n	80010d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010c4:	4b23      	ldr	r3, [pc, #140]	; (8001154 <HAL_GPIO_Init+0x2d0>)
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	4922      	ldr	r1, [pc, #136]	; (8001154 <HAL_GPIO_Init+0x2d0>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	604b      	str	r3, [r1, #4]
 80010d0:	e006      	b.n	80010e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <HAL_GPIO_Init+0x2d0>)
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	43db      	mvns	r3, r3
 80010da:	491e      	ldr	r1, [pc, #120]	; (8001154 <HAL_GPIO_Init+0x2d0>)
 80010dc:	4013      	ands	r3, r2
 80010de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d006      	beq.n	80010fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <HAL_GPIO_Init+0x2d0>)
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	4918      	ldr	r1, [pc, #96]	; (8001154 <HAL_GPIO_Init+0x2d0>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	608b      	str	r3, [r1, #8]
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_GPIO_Init+0x2d0>)
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	43db      	mvns	r3, r3
 8001102:	4914      	ldr	r1, [pc, #80]	; (8001154 <HAL_GPIO_Init+0x2d0>)
 8001104:	4013      	ands	r3, r2
 8001106:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d021      	beq.n	8001158 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <HAL_GPIO_Init+0x2d0>)
 8001116:	68da      	ldr	r2, [r3, #12]
 8001118:	490e      	ldr	r1, [pc, #56]	; (8001154 <HAL_GPIO_Init+0x2d0>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	60cb      	str	r3, [r1, #12]
 8001120:	e021      	b.n	8001166 <HAL_GPIO_Init+0x2e2>
 8001122:	bf00      	nop
 8001124:	10320000 	.word	0x10320000
 8001128:	10310000 	.word	0x10310000
 800112c:	10220000 	.word	0x10220000
 8001130:	10210000 	.word	0x10210000
 8001134:	10120000 	.word	0x10120000
 8001138:	10110000 	.word	0x10110000
 800113c:	40021000 	.word	0x40021000
 8001140:	40010000 	.word	0x40010000
 8001144:	40010800 	.word	0x40010800
 8001148:	40010c00 	.word	0x40010c00
 800114c:	40011000 	.word	0x40011000
 8001150:	40011400 	.word	0x40011400
 8001154:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_GPIO_Init+0x304>)
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	43db      	mvns	r3, r3
 8001160:	4909      	ldr	r1, [pc, #36]	; (8001188 <HAL_GPIO_Init+0x304>)
 8001162:	4013      	ands	r3, r2
 8001164:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	3301      	adds	r3, #1
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	fa22 f303 	lsr.w	r3, r2, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	f47f ae8e 	bne.w	8000e98 <HAL_GPIO_Init+0x14>
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	372c      	adds	r7, #44	; 0x2c
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	40010400 	.word	0x40010400

0800118c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
 8001198:	4613      	mov	r3, r2
 800119a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800119c:	787b      	ldrb	r3, [r7, #1]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011a8:	e003      	b.n	80011b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	041a      	lsls	r2, r3, #16
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	611a      	str	r2, [r3, #16]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ce:	887a      	ldrh	r2, [r7, #2]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4013      	ands	r3, r2
 80011d4:	041a      	lsls	r2, r3, #16
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	43d9      	mvns	r1, r3
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	400b      	ands	r3, r1
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	611a      	str	r2, [r3, #16]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
	...

080011f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e26c      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 8087 	beq.w	800131e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001210:	4b92      	ldr	r3, [pc, #584]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	2b04      	cmp	r3, #4
 800121a:	d00c      	beq.n	8001236 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800121c:	4b8f      	ldr	r3, [pc, #572]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b08      	cmp	r3, #8
 8001226:	d112      	bne.n	800124e <HAL_RCC_OscConfig+0x5e>
 8001228:	4b8c      	ldr	r3, [pc, #560]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001234:	d10b      	bne.n	800124e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001236:	4b89      	ldr	r3, [pc, #548]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d06c      	beq.n	800131c <HAL_RCC_OscConfig+0x12c>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d168      	bne.n	800131c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e246      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001256:	d106      	bne.n	8001266 <HAL_RCC_OscConfig+0x76>
 8001258:	4b80      	ldr	r3, [pc, #512]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a7f      	ldr	r2, [pc, #508]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 800125e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	e02e      	b.n	80012c4 <HAL_RCC_OscConfig+0xd4>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0x98>
 800126e:	4b7b      	ldr	r3, [pc, #492]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a7a      	ldr	r2, [pc, #488]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b78      	ldr	r3, [pc, #480]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a77      	ldr	r2, [pc, #476]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001280:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e01d      	b.n	80012c4 <HAL_RCC_OscConfig+0xd4>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001290:	d10c      	bne.n	80012ac <HAL_RCC_OscConfig+0xbc>
 8001292:	4b72      	ldr	r3, [pc, #456]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a71      	ldr	r2, [pc, #452]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b6f      	ldr	r3, [pc, #444]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a6e      	ldr	r2, [pc, #440]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e00b      	b.n	80012c4 <HAL_RCC_OscConfig+0xd4>
 80012ac:	4b6b      	ldr	r3, [pc, #428]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a6a      	ldr	r2, [pc, #424]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b68      	ldr	r3, [pc, #416]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a67      	ldr	r2, [pc, #412]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d013      	beq.n	80012f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fcc8 	bl	8000c60 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d4:	f7ff fcc4 	bl	8000c60 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b64      	cmp	r3, #100	; 0x64
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e1fa      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	4b5d      	ldr	r3, [pc, #372]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0xe4>
 80012f2:	e014      	b.n	800131e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fcb4 	bl	8000c60 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fcb0 	bl	8000c60 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	; 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e1e6      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130e:	4b53      	ldr	r3, [pc, #332]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x10c>
 800131a:	e000      	b.n	800131e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d063      	beq.n	80013f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800132a:	4b4c      	ldr	r3, [pc, #304]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00b      	beq.n	800134e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001336:	4b49      	ldr	r3, [pc, #292]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b08      	cmp	r3, #8
 8001340:	d11c      	bne.n	800137c <HAL_RCC_OscConfig+0x18c>
 8001342:	4b46      	ldr	r3, [pc, #280]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d116      	bne.n	800137c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134e:	4b43      	ldr	r3, [pc, #268]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d005      	beq.n	8001366 <HAL_RCC_OscConfig+0x176>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d001      	beq.n	8001366 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e1ba      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	4939      	ldr	r1, [pc, #228]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001376:	4313      	orrs	r3, r2
 8001378:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137a:	e03a      	b.n	80013f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d020      	beq.n	80013c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001384:	4b36      	ldr	r3, [pc, #216]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138a:	f7ff fc69 	bl	8000c60 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001392:	f7ff fc65 	bl	8000c60 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e19b      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a4:	4b2d      	ldr	r3, [pc, #180]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	4b2a      	ldr	r3, [pc, #168]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	4927      	ldr	r1, [pc, #156]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	600b      	str	r3, [r1, #0]
 80013c4:	e015      	b.n	80013f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c6:	4b26      	ldr	r3, [pc, #152]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fc48 	bl	8000c60 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d4:	f7ff fc44 	bl	8000c60 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e17a      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e6:	4b1d      	ldr	r3, [pc, #116]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d03a      	beq.n	8001474 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d019      	beq.n	800143a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_RCC_OscConfig+0x274>)
 8001408:	2201      	movs	r2, #1
 800140a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140c:	f7ff fc28 	bl	8000c60 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001414:	f7ff fc24 	bl	8000c60 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e15a      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001432:	2001      	movs	r0, #1
 8001434:	f000 faa6 	bl	8001984 <RCC_Delay>
 8001438:	e01c      	b.n	8001474 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_RCC_OscConfig+0x274>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001440:	f7ff fc0e 	bl	8000c60 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001446:	e00f      	b.n	8001468 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001448:	f7ff fc0a 	bl	8000c60 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d908      	bls.n	8001468 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e140      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000
 8001460:	42420000 	.word	0x42420000
 8001464:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001468:	4b9e      	ldr	r3, [pc, #632]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1e9      	bne.n	8001448 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 80a6 	beq.w	80015ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001486:	4b97      	ldr	r3, [pc, #604]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10d      	bne.n	80014ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	4b94      	ldr	r3, [pc, #592]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	4a93      	ldr	r2, [pc, #588]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	61d3      	str	r3, [r2, #28]
 800149e:	4b91      	ldr	r3, [pc, #580]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014aa:	2301      	movs	r3, #1
 80014ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ae:	4b8e      	ldr	r3, [pc, #568]	; (80016e8 <HAL_RCC_OscConfig+0x4f8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d118      	bne.n	80014ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ba:	4b8b      	ldr	r3, [pc, #556]	; (80016e8 <HAL_RCC_OscConfig+0x4f8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a8a      	ldr	r2, [pc, #552]	; (80016e8 <HAL_RCC_OscConfig+0x4f8>)
 80014c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fbcb 	bl	8000c60 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ce:	f7ff fbc7 	bl	8000c60 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b64      	cmp	r3, #100	; 0x64
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e0fd      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e0:	4b81      	ldr	r3, [pc, #516]	; (80016e8 <HAL_RCC_OscConfig+0x4f8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x312>
 80014f4:	4b7b      	ldr	r3, [pc, #492]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	4a7a      	ldr	r2, [pc, #488]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	6213      	str	r3, [r2, #32]
 8001500:	e02d      	b.n	800155e <HAL_RCC_OscConfig+0x36e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0x334>
 800150a:	4b76      	ldr	r3, [pc, #472]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	4a75      	ldr	r2, [pc, #468]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	6213      	str	r3, [r2, #32]
 8001516:	4b73      	ldr	r3, [pc, #460]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	4a72      	ldr	r2, [pc, #456]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800151c:	f023 0304 	bic.w	r3, r3, #4
 8001520:	6213      	str	r3, [r2, #32]
 8001522:	e01c      	b.n	800155e <HAL_RCC_OscConfig+0x36e>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b05      	cmp	r3, #5
 800152a:	d10c      	bne.n	8001546 <HAL_RCC_OscConfig+0x356>
 800152c:	4b6d      	ldr	r3, [pc, #436]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4a6c      	ldr	r2, [pc, #432]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	6213      	str	r3, [r2, #32]
 8001538:	4b6a      	ldr	r3, [pc, #424]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4a69      	ldr	r2, [pc, #420]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6213      	str	r3, [r2, #32]
 8001544:	e00b      	b.n	800155e <HAL_RCC_OscConfig+0x36e>
 8001546:	4b67      	ldr	r3, [pc, #412]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	4a66      	ldr	r2, [pc, #408]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800154c:	f023 0301 	bic.w	r3, r3, #1
 8001550:	6213      	str	r3, [r2, #32]
 8001552:	4b64      	ldr	r3, [pc, #400]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	4a63      	ldr	r2, [pc, #396]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001558:	f023 0304 	bic.w	r3, r3, #4
 800155c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d015      	beq.n	8001592 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001566:	f7ff fb7b 	bl	8000c60 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156c:	e00a      	b.n	8001584 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156e:	f7ff fb77 	bl	8000c60 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	f241 3288 	movw	r2, #5000	; 0x1388
 800157c:	4293      	cmp	r3, r2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e0ab      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001584:	4b57      	ldr	r3, [pc, #348]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0ee      	beq.n	800156e <HAL_RCC_OscConfig+0x37e>
 8001590:	e014      	b.n	80015bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001592:	f7ff fb65 	bl	8000c60 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001598:	e00a      	b.n	80015b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800159a:	f7ff fb61 	bl	8000c60 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e095      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b0:	4b4c      	ldr	r3, [pc, #304]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1ee      	bne.n	800159a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d105      	bne.n	80015ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c2:	4b48      	ldr	r3, [pc, #288]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	4a47      	ldr	r2, [pc, #284]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80015c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 8081 	beq.w	80016da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d8:	4b42      	ldr	r3, [pc, #264]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d061      	beq.n	80016a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d146      	bne.n	800167a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ec:	4b3f      	ldr	r3, [pc, #252]	; (80016ec <HAL_RCC_OscConfig+0x4fc>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f2:	f7ff fb35 	bl	8000c60 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fa:	f7ff fb31 	bl	8000c60 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e067      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160c:	4b35      	ldr	r3, [pc, #212]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f0      	bne.n	80015fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001620:	d108      	bne.n	8001634 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001622:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	492d      	ldr	r1, [pc, #180]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a19      	ldr	r1, [r3, #32]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	430b      	orrs	r3, r1
 8001646:	4927      	ldr	r1, [pc, #156]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <HAL_RCC_OscConfig+0x4fc>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff fb05 	bl	8000c60 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff fb01 	bl	8000c60 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e037      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x46a>
 8001678:	e02f      	b.n	80016da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167a:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <HAL_RCC_OscConfig+0x4fc>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff faee 	bl	8000c60 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff faea 	bl	8000c60 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e020      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x498>
 80016a6:	e018      	b.n	80016da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e013      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d001      	beq.n	80016da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40007000 	.word	0x40007000
 80016ec:	42420060 	.word	0x42420060

080016f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0d0      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001704:	4b6a      	ldr	r3, [pc, #424]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d910      	bls.n	8001734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b67      	ldr	r3, [pc, #412]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f023 0207 	bic.w	r2, r3, #7
 800171a:	4965      	ldr	r1, [pc, #404]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	4313      	orrs	r3, r2
 8001720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0b8      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d020      	beq.n	8001782 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800174c:	4b59      	ldr	r3, [pc, #356]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4a58      	ldr	r2, [pc, #352]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001752:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001756:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001764:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4a52      	ldr	r2, [pc, #328]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800176e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	4b50      	ldr	r3, [pc, #320]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	494d      	ldr	r1, [pc, #308]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d040      	beq.n	8001810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d115      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e07f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	4b41      	ldr	r3, [pc, #260]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e073      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017be:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e06b      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ce:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f023 0203 	bic.w	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4936      	ldr	r1, [pc, #216]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e0:	f7ff fa3e 	bl	8000c60 <HAL_GetTick>
 80017e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e8:	f7ff fa3a 	bl	8000c60 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e053      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 020c 	and.w	r2, r3, #12
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	429a      	cmp	r2, r3
 800180e:	d1eb      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d210      	bcs.n	8001840 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 0207 	bic.w	r2, r3, #7
 8001826:	4922      	ldr	r1, [pc, #136]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	4313      	orrs	r3, r2
 800182c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e032      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d008      	beq.n	800185e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4916      	ldr	r1, [pc, #88]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d009      	beq.n	800187e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	490e      	ldr	r1, [pc, #56]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	4313      	orrs	r3, r2
 800187c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800187e:	f000 f821 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8001882:	4602      	mov	r2, r0
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	490a      	ldr	r1, [pc, #40]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001890:	5ccb      	ldrb	r3, [r1, r3]
 8001892:	fa22 f303 	lsr.w	r3, r2, r3
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1cc>)
 8001898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_RCC_ClockConfig+0x1d0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f99c 	bl	8000bdc <HAL_InitTick>

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40022000 	.word	0x40022000
 80018b4:	40021000 	.word	0x40021000
 80018b8:	080032b0 	.word	0x080032b0
 80018bc:	20000008 	.word	0x20000008
 80018c0:	2000000c 	.word	0x2000000c

080018c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c4:	b490      	push	{r4, r7}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018ca:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018cc:	1d3c      	adds	r4, r7, #4
 80018ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018d4:	f240 2301 	movw	r3, #513	; 0x201
 80018d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018ee:	4b22      	ldr	r3, [pc, #136]	; (8001978 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f003 030c 	and.w	r3, r3, #12
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d002      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x40>
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d003      	beq.n	800190a <HAL_RCC_GetSysClockFreq+0x46>
 8001902:	e02d      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001904:	4b1d      	ldr	r3, [pc, #116]	; (800197c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001906:	623b      	str	r3, [r7, #32]
      break;
 8001908:	e02d      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	0c9b      	lsrs	r3, r3, #18
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001916:	4413      	add	r3, r2
 8001918:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800191c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d013      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <HAL_RCC_GetSysClockFreq+0xb4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	0c5b      	lsrs	r3, r3, #17
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001936:	4413      	add	r3, r2
 8001938:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800193c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	4a0e      	ldr	r2, [pc, #56]	; (800197c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001942:	fb02 f203 	mul.w	r2, r2, r3
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	fbb2 f3f3 	udiv	r3, r2, r3
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
 800194e:	e004      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001954:	fb02 f303 	mul.w	r3, r2, r3
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	623b      	str	r3, [r7, #32]
      break;
 800195e:	e002      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001962:	623b      	str	r3, [r7, #32]
      break;
 8001964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001966:	6a3b      	ldr	r3, [r7, #32]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3728      	adds	r7, #40	; 0x28
 800196c:	46bd      	mov	sp, r7
 800196e:	bc90      	pop	{r4, r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	08001f20 	.word	0x08001f20
 8001978:	40021000 	.word	0x40021000
 800197c:	007a1200 	.word	0x007a1200
 8001980:	003d0900 	.word	0x003d0900

08001984 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <RCC_Delay+0x34>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <RCC_Delay+0x38>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	0a5b      	lsrs	r3, r3, #9
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	fb02 f303 	mul.w	r3, r2, r3
 800199e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019a0:	bf00      	nop
  }
  while (Delay --);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1e5a      	subs	r2, r3, #1
 80019a6:	60fa      	str	r2, [r7, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f9      	bne.n	80019a0 <RCC_Delay+0x1c>
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	20000008 	.word	0x20000008
 80019bc:	10624dd3 	.word	0x10624dd3

080019c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e076      	b.n	8001ac0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d108      	bne.n	80019ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019e2:	d009      	beq.n	80019f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
 80019ea:	e005      	b.n	80019f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d106      	bne.n	8001a18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff f82e 	bl	8000a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7c:	ea42 0103 	orr.w	r1, r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	0c1a      	lsrs	r2, r3, #16
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f002 0204 	and.w	r2, r2, #4
 8001a9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	69da      	ldr	r2, [r3, #28]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_SPI_Transmit+0x22>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e126      	b.n	8001d38 <HAL_SPI_Transmit+0x270>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001af2:	f7ff f8b5 	bl	8000c60 <HAL_GetTick>
 8001af6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d002      	beq.n	8001b0e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b0c:	e10b      	b.n	8001d26 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <HAL_SPI_Transmit+0x52>
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d102      	bne.n	8001b20 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b1e:	e102      	b.n	8001d26 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2203      	movs	r2, #3
 8001b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	88fa      	ldrh	r2, [r7, #6]
 8001b38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	88fa      	ldrh	r2, [r7, #6]
 8001b3e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b66:	d10f      	bne.n	8001b88 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b92:	2b40      	cmp	r3, #64	; 0x40
 8001b94:	d007      	beq.n	8001ba6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bae:	d14b      	bne.n	8001c48 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d002      	beq.n	8001bbe <HAL_SPI_Transmit+0xf6>
 8001bb8:	8afb      	ldrh	r3, [r7, #22]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d13e      	bne.n	8001c3c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	881a      	ldrh	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	1c9a      	adds	r2, r3, #2
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001be2:	e02b      	b.n	8001c3c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d112      	bne.n	8001c18 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	881a      	ldrh	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	1c9a      	adds	r2, r3, #2
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c16:	e011      	b.n	8001c3c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c18:	f7ff f822 	bl	8000c60 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d803      	bhi.n	8001c30 <HAL_SPI_Transmit+0x168>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2e:	d102      	bne.n	8001c36 <HAL_SPI_Transmit+0x16e>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d102      	bne.n	8001c3c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c3a:	e074      	b.n	8001d26 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1ce      	bne.n	8001be4 <HAL_SPI_Transmit+0x11c>
 8001c46:	e04c      	b.n	8001ce2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <HAL_SPI_Transmit+0x18e>
 8001c50:	8afb      	ldrh	r3, [r7, #22]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d140      	bne.n	8001cd8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	7812      	ldrb	r2, [r2, #0]
 8001c62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	3b01      	subs	r3, #1
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001c7c:	e02c      	b.n	8001cd8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d113      	bne.n	8001cb4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	330c      	adds	r3, #12
 8001c96:	7812      	ldrb	r2, [r2, #0]
 8001c98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	86da      	strh	r2, [r3, #54]	; 0x36
 8001cb2:	e011      	b.n	8001cd8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cb4:	f7fe ffd4 	bl	8000c60 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d803      	bhi.n	8001ccc <HAL_SPI_Transmit+0x204>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cca:	d102      	bne.n	8001cd2 <HAL_SPI_Transmit+0x20a>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d102      	bne.n	8001cd8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001cd6:	e026      	b.n	8001d26 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1cd      	bne.n	8001c7e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	6839      	ldr	r1, [r7, #0]
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 f8c0 	bl	8001e6c <SPI_EndRxTxTransaction>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10a      	bne.n	8001d16 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	77fb      	strb	r3, [r7, #31]
 8001d22:	e000      	b.n	8001d26 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001d24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d36:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d4e:	b2db      	uxtb	r3, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
	...

08001d5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001d6c:	f7fe ff78 	bl	8000c60 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	4413      	add	r3, r2
 8001d7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001d7c:	f7fe ff70 	bl	8000c60 <HAL_GetTick>
 8001d80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001d82:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	015b      	lsls	r3, r3, #5
 8001d88:	0d1b      	lsrs	r3, r3, #20
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	fb02 f303 	mul.w	r3, r2, r3
 8001d90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d92:	e054      	b.n	8001e3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9a:	d050      	beq.n	8001e3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d9c:	f7fe ff60 	bl	8000c60 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d902      	bls.n	8001db2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d13d      	bne.n	8001e2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001dc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dca:	d111      	bne.n	8001df0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dd4:	d004      	beq.n	8001de0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dde:	d107      	bne.n	8001df0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001df8:	d10f      	bne.n	8001e1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e017      	b.n	8001e5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4013      	ands	r3, r2
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	bf0c      	ite	eq
 8001e4e:	2301      	moveq	r3, #1
 8001e50:	2300      	movne	r3, #0
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	461a      	mov	r2, r3
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d19b      	bne.n	8001d94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000008 	.word	0x20000008

08001e6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2180      	movs	r1, #128	; 0x80
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f7ff ff6a 	bl	8001d5c <SPI_WaitFlagStateUntilTimeout>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d007      	beq.n	8001e9e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e92:	f043 0220 	orr.w	r2, r3, #32
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e000      	b.n	8001ea0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <__libc_init_array>:
 8001ea8:	b570      	push	{r4, r5, r6, lr}
 8001eaa:	2600      	movs	r6, #0
 8001eac:	4d0c      	ldr	r5, [pc, #48]	; (8001ee0 <__libc_init_array+0x38>)
 8001eae:	4c0d      	ldr	r4, [pc, #52]	; (8001ee4 <__libc_init_array+0x3c>)
 8001eb0:	1b64      	subs	r4, r4, r5
 8001eb2:	10a4      	asrs	r4, r4, #2
 8001eb4:	42a6      	cmp	r6, r4
 8001eb6:	d109      	bne.n	8001ecc <__libc_init_array+0x24>
 8001eb8:	f000 f822 	bl	8001f00 <_init>
 8001ebc:	2600      	movs	r6, #0
 8001ebe:	4d0a      	ldr	r5, [pc, #40]	; (8001ee8 <__libc_init_array+0x40>)
 8001ec0:	4c0a      	ldr	r4, [pc, #40]	; (8001eec <__libc_init_array+0x44>)
 8001ec2:	1b64      	subs	r4, r4, r5
 8001ec4:	10a4      	asrs	r4, r4, #2
 8001ec6:	42a6      	cmp	r6, r4
 8001ec8:	d105      	bne.n	8001ed6 <__libc_init_array+0x2e>
 8001eca:	bd70      	pop	{r4, r5, r6, pc}
 8001ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ed0:	4798      	blx	r3
 8001ed2:	3601      	adds	r6, #1
 8001ed4:	e7ee      	b.n	8001eb4 <__libc_init_array+0xc>
 8001ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eda:	4798      	blx	r3
 8001edc:	3601      	adds	r6, #1
 8001ede:	e7f2      	b.n	8001ec6 <__libc_init_array+0x1e>
 8001ee0:	080032c0 	.word	0x080032c0
 8001ee4:	080032c0 	.word	0x080032c0
 8001ee8:	080032c0 	.word	0x080032c0
 8001eec:	080032c4 	.word	0x080032c4

08001ef0 <memset>:
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4402      	add	r2, r0
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d100      	bne.n	8001efa <memset+0xa>
 8001ef8:	4770      	bx	lr
 8001efa:	f803 1b01 	strb.w	r1, [r3], #1
 8001efe:	e7f9      	b.n	8001ef4 <memset+0x4>

08001f00 <_init>:
 8001f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f02:	bf00      	nop
 8001f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f06:	bc08      	pop	{r3}
 8001f08:	469e      	mov	lr, r3
 8001f0a:	4770      	bx	lr

08001f0c <_fini>:
 8001f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f0e:	bf00      	nop
 8001f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f12:	bc08      	pop	{r3}
 8001f14:	469e      	mov	lr, r3
 8001f16:	4770      	bx	lr
